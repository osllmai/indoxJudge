import json
from typing import List
from pydantic import BaseModel, Field

from indox.IndoxEval.hallucination.template import HallucinationTemplate


class HallucinationVerdict(BaseModel):
    """
    Model representing a verdict on whether an output contains hallucinations,
    including the verdict itself and the reasoning behind it.
    """
    verdict: str
    reason: str = Field(default=None)


class Verdicts(BaseModel):
    """
    Model representing a list of HallucinationVerdict instances.
    """
    verdicts: List[HallucinationVerdict]


class Reason(BaseModel):
    """
    Model representing the reason provided for any hallucinations or factual alignments found in the output.
    """
    reason: str


class Hallucination:
    """
    Class for evaluating hallucinations in language model outputs by analyzing the generated responses,
    generating verdicts, and calculating hallucination scores.
    """
    def __init__(self, llm_response: str, retrieval_context: str, threshold: float = 0.5, include_reason: bool = True,
                 strict_mode: bool = False):
        """
        Initializes the Hallucination class with the LLM response, retrieval context, and evaluation settings.

        Parameters:
        llm_response (str): The response generated by the language model.
        retrieval_context (str): The context from which information was retrieved for comparison.
        threshold (float): The threshold for determining hallucinations. Defaults to 0.5.
        include_reason (bool): Whether to include reasoning for the hallucination verdicts. Defaults to True.
        strict_mode (bool): Whether to use strict mode, which forces a score of 1 if hallucination exceeds the threshold. Defaults to False.
        """
        self.threshold = 0 if strict_mode else threshold
        self.include_reason = include_reason
        self.strict_mode = strict_mode
        self.evaluation_cost = None
        self.llm_response = llm_response
        self.retrieval_context = retrieval_context
        self.model = None

    def set_model(self, model):
        """
        Sets the language model to be used for evaluation.

        Parameters:
        model (str): The language model to use.
        """
        self.model = model

    def measure(self) -> float:
        """
        Measures the level of hallucinations in the LLM response by generating verdicts and reasons,
        then calculating the hallucination score.

        Returns:
        float: The calculated hallucination score.
        """
        self.verdicts = self._generate_verdicts()
        self.score = self._calculate_score()
        self.reason = self._generate_reason()
        self.success = self.score <= self.threshold

        return self.score

    def _generate_verdicts(self) -> List[HallucinationVerdict]:
        """
        Generates a list of verdicts on the hallucination content of the LLM response.

        Returns:
        List[HallucinationVerdict]: A list of HallucinationVerdict instances.
        """
        prompt = HallucinationTemplate.generate_verdicts(actual_output=self.llm_response,
                                                         contexts=self.retrieval_context)
        response = self._call_language_model(prompt)
        data = json.loads(response)
        return [HallucinationVerdict(**item) for item in data["verdicts"]]

    def _generate_reason(self) -> str:
        """
        Generates the reasoning behind the hallucination score if include_reason is set to True.

        Returns:
        str: The reasoning behind the hallucination score.
        """
        if not self.include_reason:
            return None

        factual_alignments = []
        contradictions = []
        for verdict in self.verdicts:
            if verdict.verdict.strip().lower() == "no":
                contradictions.append(verdict.reason)
            else:
                factual_alignments.append(verdict.reason)

        prompt = HallucinationTemplate.generate_reason(
            factual_alignments=factual_alignments,
            contradictions=contradictions,
            score=format(self.score, ".2f"),
        )

        response = self._call_language_model(prompt)
        data = json.loads(response)
        return data["reason"]

    def _calculate_score(self) -> float:
        """
        Calculates the hallucination score based on the number of hallucination verdicts.

        Returns:
        float: The calculated hallucination score.
        """
        number_of_verdicts = len(self.verdicts)
        if number_of_verdicts == 0:
            return 0

        hallucination_count = sum(1 for verdict in self.verdicts if verdict.verdict.strip().lower() == "no")

        score = hallucination_count / number_of_verdicts
        return 1 if self.strict_mode and score > self.threshold else score

    def _call_language_model(self, prompt: str) -> str:
        """
        Calls the language model with the given prompt and returns the response.

        Parameters:
        prompt (str): The prompt to provide to the language model.

        Returns:
        str: The response from the language model.
        """
        response = self.model.generate_evaluation_response(prompt=prompt)
        return response
